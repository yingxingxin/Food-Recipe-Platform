Index: src/main/java/org/example/foodrecipeplatform/MealDbAPI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.foodrecipeplatform;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport org.json.simple.JSONArray;\nimport org.json.simple.JSONObject;\nimport org.json.simple.parser.JSONParser;\nimport org.json.simple.parser.ParseException;\n\npublic class MealDbAPI {\n\n    private static final String API_BASE_URL = \"https://www.themealdb.com/api/json/v1/1/\";\n\n    // Search meals by name\n    public List<CardData> searchMealsByName(String mealName) {\n        String endpoint = API_BASE_URL + \"search.php?s=\" + mealName.replace(\" \", \"%20\");\n        return fetchMeals(endpoint);\n    }\n\n    // Get meals by first letter\n    public List<CardData> getMealsByFirstLetter(char firstLetter) {\n        String endpoint = API_BASE_URL + \"search.php?f=\" + firstLetter;\n        return fetchMeals(endpoint);\n    }\n\n    // Gets a random meal\n    public List<CardData> getRandomMeal() {\n        String endpoint = API_BASE_URL + \"random.php\";\n        return fetchMeals(endpoint);\n    }\n\n    // Gets meal by category\n    public List<CardData> getMealsByCategory(String category) {\n        String endpoint = API_BASE_URL + \"filter.php?c=\" + category.replace(\" \", \"%20\");\n        return fetchMealsFromFilter(endpoint);\n    }\n\n    // Gets meals by cuisine\n    public List<CardData> getMealsByCuisine(String area) {\n        String endpoint = API_BASE_URL + \"filter.php?a=\" + area.replace(\" \", \"%20\");\n        return fetchMealsFromFilter(endpoint);\n    }\n\n    // Gets meals by main ingredient\n    public List<CardData> getMealsByIngredient(String ingredient) {\n        String endpoint = API_BASE_URL + \"filter.php?i=\" + ingredient.replace(\" \", \"%20\");\n        return fetchMealsFromFilter(endpoint);\n    }\n\n    // Gets meals by all categories\n    public List<String> getAllCategories() {\n        String endpoint = API_BASE_URL + \"list.php?c=list\";\n        List<String> categories = new ArrayList<>();\n\n        try {\n            String jsonResponse = makeApiRequest(endpoint);\n            JSONParser parser = new JSONParser();\n            JSONObject json = (JSONObject) parser.parse(jsonResponse);\n            JSONArray categoriesArray = (JSONArray) json.get(\"meals\");\n\n            for (Object item : categoriesArray) {\n                JSONObject category = (JSONObject) item;\n                categories.add((String) category.get(\"strCategory\"));\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        return categories;\n    }\n\n    // Helper method to fetch meals from search and lookup endpoints\n    private List<CardData> fetchMeals(String endpoint) {\n        List<CardData> meals = new ArrayList<>();\n\n        try {\n            String jsonResponse = makeApiRequest(endpoint);\n            JSONParser parser = new JSONParser();\n            JSONObject json = (JSONObject) parser.parse(jsonResponse);\n            JSONArray mealsArray = (JSONArray) json.get(\"meals\");\n\n            if (mealsArray == null) {\n                return meals;\n            }\n\n            for (Object item : mealsArray) {\n                JSONObject meal = (JSONObject) item;\n                String mealId = (String) meal.get(\"idMeal\");\n                String mealName = (String) meal.get(\"strMeal\");\n                String mealThumb = (String) meal.get(\"strMealThumb\");\n                String mealInstructions = (String) meal.get(\"strInstructions\");\n\n                // Limit description length\n                String description = mealInstructions != null ?\n                        (mealInstructions.length() > 100 ? mealInstructions.substring(0, 97) + \"...\" : mealInstructions) :\n                        \"No description available\";\n\n                CardData cardData = new CardData(mealName, description, mealThumb);\n                cardData.setMealId(mealId);\n                meals.add(cardData);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        return meals;\n    }\n\n    // Helper method to fetch meals from filter endpoints\n    private List<CardData> fetchMealsFromFilter(String endpoint) {\n        List<CardData> meals = new ArrayList<>();\n\n        try {\n            String jsonResponse = makeApiRequest(endpoint);\n            JSONParser parser = new JSONParser();\n            JSONObject json = (JSONObject) parser.parse(jsonResponse);\n            JSONArray mealsArray = (JSONArray) json.get(\"meals\");\n\n            if (mealsArray == null) {\n                return meals; // Return empty list if no meals found\n            }\n\n            for (Object item : mealsArray) {\n                JSONObject meal = (JSONObject) item;\n                String mealId = (String) meal.get(\"idMeal\");\n                String mealName = (String) meal.get(\"strMeal\");\n                String mealThumb = (String) meal.get(\"strMealThumb\");\n\n                CardData cardData = new CardData(mealName, \"Click for details\", mealThumb);\n                cardData.setMealId(mealId);\n                meals.add(cardData);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        return meals;\n    }\n\n    // Make HTTP request to API and return response as string\n    private String makeApiRequest(String endpoint) throws IOException {\n        URL url = new URL(endpoint);\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        connection.setRequestMethod(\"GET\");\n\n        int responseCode = connection.getResponseCode();\n        if (responseCode != 200) {\n            throw new IOException(\"HTTP error code: \" + responseCode);\n        }\n\n        BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n        StringBuilder response = new StringBuilder();\n        String line;\n\n        while ((line = reader.readLine()) != null) {\n            response.append(line);\n        }\n        reader.close();\n\n        return response.toString();\n    }\n}\n
===================================================================
diff --git a/src/main/java/org/example/foodrecipeplatform/MealDbAPI.java b/src/main/java/org/example/foodrecipeplatform/MealDbAPI.java
--- a/src/main/java/org/example/foodrecipeplatform/MealDbAPI.java	(revision e6e68aa06616c8a05f8932e24a3c5eb64d5163c4)
+++ b/src/main/java/org/example/foodrecipeplatform/MealDbAPI.java	(date 1744501688623)
@@ -53,6 +53,12 @@
         return fetchMealsFromFilter(endpoint);
     }
 
+    // get Saved Favorited Meals
+//    public List<CardData> getFavoriteMeals() {
+//        String endpoint = API_BASE_URL + "filter.php?f=favorite";
+//        return List.of();
+//    }
+
     // Gets meals by all categories
     public List<String> getAllCategories() {
         String endpoint = API_BASE_URL + "list.php?c=list";
